{"hiddenService":"f2mz6ttcwyslnz5u.onion","webDetected":true,"sshDetected":false,"ricochetDetected":false,"ircDetected":false,"ftpDetected":false,"smtpDetected":false,"bitcoinDetected":false,"mongodbDetected":false,"vncDetected":false,"xmppDetected":false,"serverPoweredBy":"","serverVersion":"Apache/2.4.10 (Debian) OpenSSL/1.0.1t","foundApacheModStatus":true,"relatedOnionServices":null,"relatedOnionDomains":["ssee.jagger","ger.me"],"linkedSites":["termux.com","access.redhat.com","www.freedesktop.org","wiki.archlinux.org","pgp.mit.edu"],"internalPages":["","f2mz6ttcwyslnz5u.onion"],"ipAddresses":["185.25.148.240","61.216.2.13","2.132.49.165"],"openDirectories":null,"exifImages":null,"interestingFiles":null,"pageReferencedDirectories":["f2mz6ttcwyslnz5u.onion"],"pgpKeys":null,"hashes":["6220eaa547581ca7f530ffbf764c62a76247aa90"],"snapshot":"\u003c!DOCTYPE html\u003e\n\u003chtml id=\"animate-area\"\u003e\n\t\u003chead\u003e\n\t\t\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" /\u003e\n\t\t\u003ctitle\u003ejagger's blog\u003c/title\u003e\n\t\t\u003clink rel=\"shortcut icon\" href=\"favicon.png\" type=\"image/x-icon\" /\u003e\n\t\u003c/head\u003e\n\t\u003cbody\u003e\n\t\t\u003cdiv id=\"wrapper\"\u003e\n\t\t\t\u003cdiv id=\"content\"\u003e\n\t\t\t\t\u003cdiv class=text\u003e\n\t\t\t\t\t\u003c!--\u003cimg src=\"kiddo1.png\" width=\"100px\" align=\"right\"\u003e--\u003e\n\t\t\t\t\t\u003ca href=\"index.php\" style=\"text-decoration:none;\"\u003e\u003ch1\u003e\u003cdiv class=\"glitch\" data-text=\"jaggers blog\"\u003ejaggers blog\u003c/div\u003e\u003c/h1\u003e\n\t\t\t\t\t\u003ci\u003e\u003cdiv class=\"glitch\" style=\"color:#F000FF; font-size: 16px;\" data-text=\"a blog 'bout life, hacking and mind.\"\u003ea blog 'bout life, hacking and mind.\u003c/div\u003e\u003c/i\u003e\u003c/a\u003e\n\t\t\t\t\t\u003cdiv style=\"float:right; color: white\"\u003e\u003ca href=\"about.php\" style=\"float:right; color: white; margin-left:1ex;\"\u003eabout\u003c/a\u003e  \n\t\t\t\t\t \u003ca href=\"blogosphere.php\" style=\"float:right; color: white; margin-left:1ex;\"\u003eblogosphere\u003c/a\u003e\n\t\t\t\t\t \u003ca href=\"search.php\" style=\"float:right; color: white; margin-left:1ex;\"\u003esearch\u003c/a\u003e\n\t\t\t\t\t\u003c/div\u003e\u003cbr /\u003e\n\t\t\t\t\t\u003chr /\u003e\n\t\t\t\t\t\u003ch2\u003e\u003ca href='post.php?id=19'\u003e\u003cu\u003e\u003etermux\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-07-08 01:40:10\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e termux is a really powerfull terminal emulator for android.\u003cbr /\u003e\r\nit uses busy box and apt and runs really smooth. \u003cbr /\u003e\r\nit's the first android terminal i really started using for my daily work. it has build in ssh support and u can install a buttload of packages such as zsh, git or nmap.\u003cbr /\u003e\r\ncheck it out.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\npro tipp: the volume down button is the ctrl key. \u003cbr /\u003e\r\n\u003cbr /\u003e\r\n\u003ca href=\"https://termux.com/\"\u003etermux website\u003c/a\u003e\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\u003ch2\u003e\u003ca href='post.php?id=18'\u003e\u003cu\u003e\u003ehidden service\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-07-05 23:42:30\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e hey my blog is now available as a hidden service :) \u003cbr /\u003e\r\n\u003ca href=\"https://f2mz6ttcwyslnz5u.onion/\"\u003ehttps://f2mz6ttcwyslnz5u.onion/\u003c/a\u003e\u003cbr /\u003e\r\n\u003cbr  /\u003e\r\nnow lots of wicket webcrawlers are visiting me and i get a lot requests for stuff like /wp-login.php.\u003cbr /\u003e\r\nquite interesting...\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nyour free to hack me btw. just pls don't forget to write me a mail when u were successful ;)\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\u003ch2\u003e\u003ca href='post.php?id=17'\u003e\u003cu\u003e\u003esystemd\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-06-30 18:36:27\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e \u003cb\u003eabstract:\u003c/b\u003e\u003cbr /\u003esystemd at it's core is the new init process for gnu/linux based operating systems.\u003cbr /\u003e an init process is the process that starts all the other processes(daemons). it's the first process to start at boot and it always has the process id 1. systemd also introduces a lot of new functions to the gnu/linux ecosystem. it basically becomes the new face of gnu/linux systems from the perspective of a system administrator. \u003cbr /\u003esystemd replaces the old sysv [system five] init system which is often also is simply referred to as init. \u003cbr /\u003esysv served since the 90s and even tho it had been under constant development it was getting old.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003ehistory:\u003c/b\u003e\u003cbr /\u003eon april 29, 2005 apple introduced launchd as their new init system. \u003cbr /\u003eapple's operating system macos and it's kernel darwin work pretty similar to the gnu system and its kernel linux, (macos is actually related to the bsd operating system) since the all theses operating systems have their roots in the unix operating system. (as well as android, ios and basically every other modern operating system except for windows)\u003cbr /\u003e\u003cbr /\u003elaunchd was an epiphany and so it was adopted by the gnu/linux community pretty fast. there are two new major concurenting new init systems for gnu/linux: upstart and systemd.\u003cbr /\u003eupstart was developed by canonical and used by its gnu/linux derivart ubuntu. since it has not been widely adopted anywhere else systemd has made made the race. systemd is developed by red hat which is the biggest company in the gnu/linux world with sales at about 2 billion dollar. red hat is best known for its operating systems fedora and rhel(red hat enterprise linux). \u003cbr /\u003esince redhat introduced systemd at the 30th march 2010 it had been adopted by many other distributions such as debian, arch, centos, opensuse and even ubuntu so that it has been become the new standard on gnu/linux systems.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003esystem boot:\u003c/b\u003e\u003cbr /\u003ethe startpoint of the development of systemd has been the boot process. a classical boot up of a gnu/linux system could look like this: \u003cbr /\u003ethe user powers on the computer. first the mainboard checks the connected hardware maybe counts up the ram and looks up the connected storage devices such as hard drives. then the uefi system takes over. it looks throw the hard drive, that is configured as first boot device, searching block by block from the beginning for the .efi binary. if it finds it it executes it.\u003cbr /\u003ethe .efi binary contains informations about the drive and how it has to be booted. it than starts the bootloader. the bootloader then loads the kernel and starts the init process which starts all the other processes.\u003cbr /\u003ehistorically sysv started the first process waited till it had successfully started, then it started the second one waited again and so on. if one process had stuck or had taken a long time to start the hohle system waited. even tho sysv implemented features like parallelisation this method was not optimal.\u003cbr /\u003elaunchd and later systemd optimized this process.\u003cbr /\u003efirst it focused a lot on parallelisation. than it introduced a system referred to as start on demand and sockets. which means that when a process is started it opens a socket and just pretends to be online even tho it's not. it only comes up when it's really needed.\u003cbr/\u003ethis results in much faster boot times.\u003cbr /\u003ebesides this core functionality systemd comes with a lot more functions.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003ebasic ideas of systemd:\u003c/b\u003e\u003cbr /\u003ecompatibility: systemd is according to red hat 99% compatible with sysv. \u003cbr/\u003ethis follows that an administrator can use his old initscripts.\u003cbr /\u003eevery service has cgroup: cgroups are a linux kernel feature that was introduced with the kernel 2.6.24 in 2009. the basic idea of cgroups is to distribute system resources. \u003cbr /\u003esystemd groupes everything in general. it replaces the old runlevels with so called targets. runlevel 5 for example is now graphical.target whitch makes sense since it contains all the processes that are involved with the creation of the user interface.\u003cbr /\u003esystemd thinks in terms of units. \u003cbr /\u003ein systemd, a unit refers to any resource that the system knows how to operate on and manage. a unit is the primary object that the systemd tools know how to deal with. these resources are defined using configuration files called unit files. there are currently 12 unit types supported by systemd:\u003cbr /\u003eservice, socket, device, mount, automount, swap, target, timer, path, snapshot, slice, scope.\u003cbr /\u003eall config files are located under /etc/systemd and have the same layout (see config files)\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eunits:\u003c/b\u003e\u003cbr /\u003eservice\u003cspan class=\"t1\"\u003e: a service unit describes how to manage a service or application on the server. this include\u003c/span\u003e\u003cspan class=\"t2\"\u003es\u003c/span\u003e\u003cspan class=\"t1\"\u003e how to start or stop the service, under which circumstances it should be automatically started, and the dependency and ordering information for related software.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003esocket\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a socket unit file describes a network or ipc socket, or a fifo buffer that systemd uses for socket-based activation. these always have an associated .service file that will be started when activity is seen on the socket that this unit defines. (see boot)\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003edevice\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a unit that describes a device that has been designated as needing systemd management by udev or the sysfs filesystem. not all devices will have .device files. some scenarios where .device units may be necessary are for ordering, mounting, and accessing the devices.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003emount\u003c/span\u003e\u003cspan class=\"t1\"\u003e: this unit defines a mountpoint on the system to be managed by systemd. these are named after the mount path, with slashes changed to dashes. entries within /etc/fstab can have units created automatically.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003eautomount\u003c/span\u003e\u003cspan class=\"t1\"\u003e: an automount unit configures a mountpoint that will be automatically mounted. these must be named after the mount point they refer to and must have a matching .mount unit to define the specifics of the mount.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003eswap\u003c/span\u003e\u003cspan class=\"t1\"\u003e: this unit describes swap space on the system. the name of these units must reflect the device or file path of the space.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003etarget\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a target unit is used to provide synchronization points for other units when booting up or changing states. they also can be used to bring the system to a new state. other units specify their relation to targets to become tied to the target's operations. \u003cbr/\u003etargets replace the old runlevels. \u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003epath\u003c/span\u003e\u003cspan class=\"t1\"\u003e: this unit defines a path that can be used for path-based activation. by default, a service unit of the same base name will be started when the path reaches the specified state. this uses inotify to monitor the path for changes.\u003c/span\u003e\u003c/p\u003etimer\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a timer unit defines a timer that will be managed by systemd, similar to a cron job for delayed or scheduled activation. a matching unit will be started when the timer is reached. \u003c/span\u003e\u003cspan class=\"t3\"\u003e(see timers)\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"/\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"/\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003esnapshot\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a snapshot unit is created automatically by the systemctl snapshot command. it allows you to reconstruct the current state of the system after making changes. snapshots do not survive across sessions and are used to roll back temporary states.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t1\"/\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003eslice\u003c/span\u003e\u003cspan class=\"t1\"\u003e: a slice unit is associated with linux control group nodes, allowing resources to be restricted or assigned to any processes associated with the slice. the name reflects its hierarchical position within the cgroup tree. units are placed in certain slices by default depending on their type.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"/\u003e\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t6\"\u003escope\u003c/span\u003e\u003cspan class=\"t1\"\u003e: scope units are created automatically by systemd from information received from its bus interfaces. these are used to manage sets of system processes that are created externally.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p3\"\u003e\u003cbr/\u003e\u003cb\u003esystemctl\u003c/b\u003e\u003cbr /\u003ethe most important tool that comes with systemd is the system control or systemctl.\u003cbr/\u003ewith systemctl an administrator can send commands to systemd. systemctl is the main tool used to administrate the system.\u003cbr/\u003ethe general syntax looks like this:\u003cbr/\u003e\u003cbr /\u003e\u003ci\u003esystemctl [options] [comand]\u003c/i\u003e\u003cbr /\u003eit can be used to start and stop processes.\u003cbr /\u003e\u003ci\u003esystemctl start httpd\u003c/i\u003e\u003cbr /\u003ethis differs to the old syntax of sysv which looked like this:\u003ci\u003eservice httpd start\u003c/i\u003e\u003cbr /\u003eaccording to the systemd maintainer lennart poettering systemd does it the right way.\u003cbr /\u003eother important functions of systemctl include:\u003c/p\u003e\u003ci\u003e\u003ctable border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"table1\"\u003e\u003ccolgroup\u003e\u003ccol width=\"118\"/\u003e\u003ccol width=\"622\"/\u003e\u003c/colgroup\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003estart\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003estarts a unit\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003estop\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003estops a unit\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003ereload\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003erestarts a unit and load new config files. (a unit that is not started will not be started)\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003estatus\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003eshows detailed status information about the unit and its childes\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elist-units\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elists all loaded units\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elist-timers\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elists all loaded timers\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elist-sockets\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elists all loaded sockets\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003e-t service\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elists all running services\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003e--state failed\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003elists all units that failed to start\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003eenable unit \u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003eactivates the unit file so that it will be started automatically (e.g. at boot)\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003edisable unit\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003edeactivates the unit file so that its not longer started automatically. \u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003eis-enabled unit\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a1\"\u003e\u003cp class=\"p16\"\u003echecks if a unit is enabled\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd style=\"text-align:left;width:1.0597in; \" class=\"table1_a13\"\u003e\u003cp class=\"table_20_contents\"\u003e\u003c/p\u003e\u003c/td\u003e\u003ctd style=\"text-align:left;width:5.6014in; \" class=\"table1_a13\"\u003e\u003cp class=\"table_20_contents\"\u003e\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\u003c/i\u003e\u003cbr /\u003esystemctl can also control the stated of the system (without root privileges) with the commands poweroff, reboot, suspend and hibernate. \u003cbr /\u003e\u003cbr /\u003e\u003cb\u003ejournal / journalctl\u003c/b\u003e\u003cbr /\u003ethe journal is the central logging system which replaces the old syslog.\u003cbr/\u003eit offers an nsa-style logging which means that it logs everything from boot to web server activates.\u003cbr /\u003ethe log is available over the journalctl tool. its features include color highlighting (errors are red, warnings are blue, why do my system crashes please give me a clue)  and advanced filtering techniques.\u003cbr/\u003ethis filter techniques are very useful and can be very abstract like: \u003cbr /\u003e\u003ci\u003ejournalctl --since \"20 min ago\"\u003c/i\u003e\u003cbr /\u003e\u003cthe journal is one of the major features of systemd. its a great helper in the everyday life of a sysadmin.\u003c/p\u003e\u003cp class=\"p10\"\u003e\u003cspan class=\"t1\"\u003ean important note is that the log is not persistent by default.\u003cbr/\u003eto make it default the admin\u003c/span\u003e\u003cspan class=\"t4\"\u003eistrator\u003c/span\u003e\u003cspan class=\"t1\"\u003e simply has to create the directory /var/log/journal.\u003c/span\u003e\u003c/p\u003e\u003cp class=\"p5\"\u003ekeep in mind that the log can get big. its a good idea to limit the size of the log and/or mount /var to an extra partition. \u003c/p\u003e\u003cp class=\"text_20_body\"\u003e\u003c/p\u003e\u003cp class=\"p3\"\u003e\u003cb\u003enetworkd\u003c/b\u003e\u003cbr /\u003enetworkd was introduced with version 219 of systemd and wrongfully didnt get much attention in the community.\u003cbr/\u003enetworkd is, as the name states, responsible for the network.\u003cbr /\u003eit replaces the good old interfaces config file but still goes hand in hand with the networkmanager and all the other tools. networkd once again proves that systemd is 99% compatible with all the things it replaces.\u003cbr /\u003enetworkd comes with a lot of features including of cause everything that was possible within the interfaces but extending the possibilities to the extreme. it can be used to build complete virtual networks (which is especially interesting in combination with containers and nspawn).\u003cbr/\u003eit come with a ton of options including configuring the mac address of an adapter to ipv6 configuration, routing, the possibility to filter packets and many, more. \u003cbr /\u003e\u003cbr /\u003e\u003cb\u003etimers\u003c/b\u003e\u003cbr /\u003etimers are a very interesting small feature of systemd. they basically replace cron.\u003cbr /\u003etimers execute tasks by schedule like every 5 minutes or every second monday.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003emisc\u003c/b\u003e\u003cbr /\u003ethere are many more features in systemd.\u003cbr /\u003ebootctl: the systemd bootloader which is a fork of gummieboot.\u003cbr /\u003ehostnamectl: is used to configure the hostname.\u003cbr /\u003etimedatectl: is used to configure the system time\u003cbr /\u003eloginctl / user session: systemd can also control the user sessions.\u003cbr /\u003emount, udev(d):  systemd can control the devices and also can generate mountpoints and maintain the fstab.\u003cbr /\u003enspawn:  containers and cgroups in systemd are a very interesting topic for themselves. i will write about them another time.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003econfig files:\u003c/b\u003e\u003cbr /\u003econfig files that are created and edited by the administrator are stored under /etc/systemd/system/\u003cbr /\u003ethe filenames of the config files follow the following structure: unit_name.unit_type. (see unit types)\u003cbr /\u003ethe outstanding feature of systemds config files is that they all look and work the same.\u003cbr /\u003eno matter if the admin wants to adjust an service or his network, configure the bootloader or want to set up a timer, the syntax and basic functionality is always the same.\u003cbr /\u003ethe config files are much more simpler than for example an sysv bash init scripts which can get very complicated.\u003cbr /\u003ecron as well was never really intuitive while timers can now be configured in more or less natural language.\u003cbr /\u003ea systemd config file typically looks like this:\u003cbr /\u003e\u003cbr /\u003e\u003ci\u003e[unit]\u003c/span\u003e\u003cspan class=\"t1\"\u003e\u003cbr/\u003edescription=\u003c/span\u003e\u003cspan class=\"t7\"\u003eservice_description\u003c/span\u003e\u003cspan class=\"t1\"\u003e\u003cbr/\u003eafter=network.target\u003cbr/\u003e\u003cbr/\u003e[service]\u003cbr/\u003eexecstart=\u003c/span\u003e\u003cspan class=\"t7\"\u003epath_to_executable\u003c/span\u003e\u003cspan class=\"t1\"\u003e\u003cbr/\u003etype=forking\u003cbr/\u003epidfile=\u003c/span\u003e\u003cspan class=\"t7\"\u003epath_to_pidfile\u003c/span\u003e\u003cspan class=\"t1\"\u003e\u003cbr/\u003e\u003cbr/\u003e[install]\u003cbr/\u003ewantedby=default.target\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\u003cp class=\"p8_borderstart\"\u003ethe syntax is kept simple and everything has speaking and self explaining names and values.\u003cbr /\u003ethese config files have a wide range of functions and get extended in their possibilities with every version\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003efinal thoughts:\u003c/b\u003e\u003cbr /\u003esystemd replaces a lot compounds in the gnu/linux ecosystem and unifies them.\u003cbr /\u003eit basically becomes the new face of gnu/linux from the perspective of an administrator.\u003cbr /\u003ei my opinion it's a great piece of software which makes a lot of things easyer and is a real win for the the gnu/linux world.\u003cbr /\u003ethere is a good developer team that stands behind it. there were no security related bugs as far i know and many reported bugs are in fact features with wanted and documented behavior. \u003cbr /\u003espeaking of documentation it's one of the best documented pieces of software in the free software world.\u003cbr /\u003ered hat does an excellent job of providing a good documentation.\u003cbr /\u003ethe biggest complain about systemd is that it simply does to much. the old unix rule one program for one thing is completely broken.\u003cbr /\u003efinally a just can recommend to every admin to take a closer look on systemd since every time i learn something new i have a holy shit that's amazing moment.\u003cbr /\u003e\u003cbr /\u003e\r\nmore informations:\u003cbr /\u003e\r\n\u003ca href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide\"\u003eoffical red hat documentation\u003c/a\u003e, \u003ca href=\"https://www.freedesktop.org/wiki/Software/systemd/\"\u003ethe free desktop wiki\u003c/a\u003e, and of cause \u003ca href=\"https://wiki.archlinux.org/index.php/systemd\"\u003emy beloved arch wiki\u003c/a\u003e\r\n\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\u003ch2\u003e\u003ca href='post.php?id=16'\u003e\u003cu\u003e\u003egulaschprogrammiernacht 2016\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-05-30 16:20:00\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e i've just came back from the gpn16 in karlsruhe.\u003cbr ?\u003e\r\nit's a really colerfull event where a lot of crazy people participate. \u003cbr /\u003e\r\n\u003cbr /\u003e\r\ni noticed that arch liunx with i3 is the new hacker standart. \u003cbr /\u003e\r\nit basicly runns on every third laptop.\r\n\u003cbr /\u003e\r\ni've got hooked on emacs there. i've allways have used vim but emacs looks pretty awesome. i will blog bout how long it takes me to get used to it ;)\u003cbr /\u003e\r\n\u003cbr /\u003e\u003cbr /\u003e\r\nsee u on gpn17.\r\n\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\u003ch2\u003e\u003ca href='post.php?id=15'\u003e\u003cu\u003e\u003ethe ultimate tor vm easy edition\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-05-10 03:32:12\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e i used to use a pfSense firewall as a tor router for my vms.\u003cbr /\u003e\r\nbut pfSense doesn't support tor anymore.\u003cbr /\u003e\r\nso im using a debian system with iptables now\u003cbr /\u003e\r\nits super simple to set up.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nthe hole point is to isolate vms so that they can only connect with the internet through tor.\u003cbr /\u003e\r\nthis will hide your ass even if you have an application (like flash) which is leaking your ip address..\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nfirst download the latest debian iso and set up a new vm.\u003cbr /\u003e\r\nset up the new vm as usual.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nbefore you power on the new vm go to the settings and add a new networkadapter.\u003cbr /\u003e\r\nconfigure the firth networkadapter to use nat and the second adapter to use a \"lan segment\" \u003cbr /\u003e(for vmware; in virtualbox its called \"internal network\")\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nthen power on the vm and install debian.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nwhen the installation is finished and your debian is up-to-date configure your second network adapter in the /etc/network/interfaces: \u003cbr /\u003e\r\n\u003ci\u003e\u003cbr /\u003e\r\n#The loopback network interface\u003cbr /\u003e\r\nauto lo\u003cbr /\u003e\r\niface lo inet loopback\u003cbr /\u003e\r\n\u003cbr /\u003e\r\n# The primary network interface\u003cbr /\u003e\r\nallow-hotplug eth0\u003cbr /\u003e\r\niface eth0 inet dhcp\u003cbr /\u003e\r\n\u003cbr /\u003e\r\n#The second network adapter\u003cbr /\u003e\r\niface eth1 inet static\u003cbr /\u003e\r\naddress 192.168.0.1 #may want to change\u003cbr /\u003e\r\nnetmask 255.255.255.0\u003cbr /\u003e\r\npre-up iptables-restore /etc/iptables.rules\u003cbr /\u003e\r\n\u003c/i\u003e\u003cbr /\u003e\r\nthen configure iptables:\u003cbr /\u003e\r\n\u003ci\u003e\r\niptables -t nat -A PREROUTING -i eth1 -p udp --dport 53 -j REDIRECT --to-ports 53\u003cbr /\u003e\r\niptables -t nat -A PREROUTING -i eth1 -p tcp -d 192.168.0.1 -j ACCEPT\u003cbr /\u003e\r\niptables -t nat -A PREROUTING -i eth1 -p tcp -j REDIRECT --to-ports 9040\u003cbr /\u003e\r\niptables-save \u003e /etc/iptables.rules\u003cbr /\u003e\r\n\u003c/i\u003e\u003cbr /\u003e\r\nnow install tor:\u003cbr /\u003e\r\n\u003ci\u003eapt-get install tor\u003c/i\u003e\u003cbr /\u003e\r\nand add the following to the end of your /etc/tor/torrc\u003cbr /\u003e\r\n\u003ci\u003e\u003cbr /\u003e\r\nVirtualAddrNetwork 10.192.0.0/10\u003cbr /\u003e\r\nAutomapHostsOnResolve 1\u003cbr /\u003e\r\nTransPort 9040\u003cbr /\u003e\r\nTransListenAddress 192.168.0.1\u003cbr /\u003e\r\nDNSPort 53\u003cbr /\u003e\r\nDNSListenAddress 192.168.0.1\u003cbr /\u003e\r\n\u003c/i\u003e\u003cbr /\u003e\r\nDONE\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nnow go to the vm that should be torifyed\u003cbr /\u003e\r\nconfigure the the network adapter to use the lan segment\u003cbr /\u003e\r\ngo into the network configuration of the vm and configure it like the folowing:\u003cbr /\u003e\r\n\u003ci\u003e\u003cbr /\u003e\r\nIP: 192.168.0.2\u003cbr /\u003e\r\nGateway: 192.168.0.1\u003cbr /\u003e\r\nDNS: 192.168.0.1\u003cbr /\u003e\r\n\u003c/i\u003e\u003cbr /\u003e\r\nhave fun and happy hacking\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nps: sorry for the extreme bad grammer and spelliong this time haven't sleeped in a while ;)\u003cbr /\u003e\r\n\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\u003ch2\u003e\u003ca href='post.php?id=14'\u003e\u003cu\u003e\u003ecan't stump the trump\u003c/u\u003e\u003c/a\u003e \u003cu style='text-align: right; float:right;'\u003e2016-07-03 21:44:14\u003c/u\u003e\u003c/h2\u003e\u003cbr /\u003e trump is the last real candidate of the republicans. \u003cbr /\u003e\r\ncruz has thrown the towel and kaisch has zero chance. \u003cbr /\u003e\r\ni like sanders but clinton will propably make it for the democrats.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\nthis shit is better than tv.\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003chr /\u003e\t\t\t\t\t\u003ccenter style=\"color: white;\"\u003e\n\t\t\t\t\tolder posts: \u003cbr /\u003e\n\t\t\t\t\t\t\u003ca href=\"index.php?pageid=1\" style=\"color: white;\"\u003e[1]\u003c/a\u003e\n\t\t\t\t\t\t\u003ca href=\"index.php?pageid=2\" style=\"color: white;\"\u003e[2]\u003c/a\u003e\n\t\t\t\t\t\t\u003ca href=\"index.php?pageid=3\" style=\"color: white;\"\u003e[3]\u003c/a\u003e\n\t\t\t\t\t\t\u003ca href=\"index.php?pageid=4\" style=\"color: white;\"\u003e[4]\u003c/a\u003e\n\t\t\t\t\t\u003c/center\u003e\u003c/A\u003e\n\t\t\t\t\t\u003cbr /\u003e\n\n\t\t\t\t\t\u003cbr /\u003e\n\t\t\t\t\t\u003ccenter\u003e\n\n\t\t\t\t\t\t,\u0026nbsp;\u0026nbsp;hack\u0026nbsp;\u0026nbsp;the\u0026nbsp;\u0026nbsp;, \u003cbr /\u003e\n\t\t\t\t\t\t/\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;planet\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\\ \u003cbr /\u003e\n\t\t\t\t\t\t((__-^^-,-^^-__)) \u003cbr /\u003e \n \t\t\t\t\t\t`-_---'\u0026nbsp;`---_-' \u003cbr /\u003e\n \t\t\t\t\t\t `--|o`\u0026nbsp;'o|--' \u003cbr /\u003e\n     \t\t\t\t\t\t\\\u0026nbsp;\u0026nbsp;`\u0026nbsp;\u0026nbsp;/ \u003cbr /\u003e\n      \t\t\t\t\t\t):\u0026nbsp;:( \u003cbr /\u003e\n      \t\t\t\t\t\t:o_o: \u003cbr /\u003e\n      \t\t\t\t\t\t\"-\" \u003cbr /\u003e\n\t\t\t\t\t\t\u003cbr /\u003e\n\t\t\t\t\t\tcontact information:\u003cbr /\u003e\n                                        \t\u003cbr /\u003e\n                                        \temail: mail[at]jagger.me\u003cbr /\u003e\n                                        \t\u003cbr /\u003e\n                                        \tpgp: https://pgp.mit.edu/pks/lookup?op=vindex\u0026search=0x3E5CDF0939625309 \u003cbr /\u003e\n                                        \t\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\n\t\t\t\t\t\t\u003c!--\u003cimg src=\"Hack-the-Planet.png\"\u003e--\u003e\n\t\t\t\t\t\u003c/center\u003e\n\t\t\t\t\u003c/div\u003e\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n","pageTitle":"jagger's blog","responseHeaders":{"CONTENT-SECURITY-POLICY":"default-src https://jagger.me","CONTENT-TYPE":"text/html; charset=UTF-8","DATE":"Tue, 26 Jul 2016 09:28:05 GMT","SERVER":"Apache/2.4.10 (Debian)","VARY":"Accept-Encoding","X-CONTENT-TYPE-OPTIONS":"nosniff","X-FRAME-OPTIONS":"SAMEORIGIN","X-XSS-PROTECTION":"1; mode=block"},"bitcoinAddresses":null,"sshKey":"","ftpFingerprint":"","ftpBanner":"","smtpFingerprint":"","smtpBanner":""}
